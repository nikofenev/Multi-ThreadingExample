package edu.matc.MultiThreadingHalloween;import org.apache.log4j.Logger;import java.util.LinkedList;import java.util.List;import java.util.concurrent.TimeUnit;/** Created 10/03/17 * *  @author nfenev */class Halloween {    private final Logger logger = Logger.getLogger(this.getClass());    private static final int KID_LINE_POSITION = 10;    private static final long RILEY_TIME_PER_SERVING_KID = 3;    private int kidLinePosition;    private final List<Kid> listOfKids;    Halloween()    {        kidLinePosition = KID_LINE_POSITION;        listOfKids = new LinkedList<Kid>();        logger.info("Created a Halloween, there are " + kidLinePosition + " positions in Riley's line");    }    void giveCandy()    {        Kid kid;        logger.info("Riley waiting for lock");        synchronized (listOfKids)        {            while(listOfKids.size()==0)            {                logger.info("Riley is waiting for kid to show up");                try                {                    listOfKids.wait();                }                catch(InterruptedException iex)                {                    logger.info("Interrupted: ",iex);                }            }            logger.info("Riley found a kid in line");            kid = (Kid)((LinkedList<?>)listOfKids).poll();        }        long duration=0;        try        {            logger.info("Riley giving " + kid.getName() + " some candy");            duration = RILEY_TIME_PER_SERVING_KID;            TimeUnit.SECONDS.sleep(duration);        }        catch(InterruptedException iex)        {            logger.info("Interrupted: ",iex);        }        logger.info("Riley completed giving candy to kid: " + kid.getName() + " in " + duration + " seconds");    }    void add(Kid kid) {        logger.info("Kid: " + kid.getName() + " walking to next house at "+kid.getInTime());        synchronized (listOfKids) {            if (listOfKids.size() == kidLinePosition) {                logger.info("No candy available for kid " + kid.getName());                logger.info("Kid "+ kid.getName() + " exists");                return ;            }            ((LinkedList<Kid>)listOfKids).offer(kid);            logger.info("Kid: " + kid.getName() + " got the candy");            if (listOfKids.size()==1) {                listOfKids.notify();            }        }    }}